syntax = "proto2";
package raftpb;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

enum EntryType {
	// 当前Entry是对状态机的操作
	EntryNormal     = 0;
	// 对当前集群配置进行更改的操作，比如增加或者减少节点
	EntryConfChange = 1;
}

// log条目
message Entry {
	// 选举任期, 每次选举之后递增1。它的主要作用是标记信息的时效性
	optional uint64     Term  = 2 [(gogoproto.nullable) = false]; // must be 64-bit aligned for atomic operations

	// 当前这个entry在整个raft日志中的位置索引, 有了Term和Index之后，一个log entry就能被唯一标识
	optional uint64     Index = 3 [(gogoproto.nullable) = false]; // must be 64-bit aligned for atomic operations

	// 当前entry的类型
	optional EntryType  Type  = 1 [(gogoproto.nullable) = false];

	// 一个被序列化后的byte数组，代表当前entry真正要执行的操作，比方说如果上面的Type是EntryNormal，那这里的Data就可能是具体要
	// 更改的key-value pair，如果Type是EntryConfChange，那Data就是具体的配置更改项ConfChange
	// raft算法本身并不关心这个数据是什么，它只是把这段数据当做log同步过程中的payload来处理，具体对这个数据的解析则有上层应用来完成。
	optional bytes      Data  = 4;
}

message SnapshotMetadata {
	optional ConfState conf_state = 1 [(gogoproto.nullable) = false];
	// 表示的是快照中最后日志的index值
	optional uint64    index      = 2 [(gogoproto.nullable) = false];
	// 表示的是快照中最后日志的任期号
	optional uint64    term       = 3 [(gogoproto.nullable) = false];
}

message Snapshot {
	 // 快照中的数据
	optional bytes            data     = 1;
	optional SnapshotMetadata metadata = 2 [(gogoproto.nullable) = false];
}

/*
MsgHup消息
成员	    类型    	作用
type	MsgHup	不用于节点间通信，仅用于发送给本节点让本节点进行选举
to	    uint64	消息接收者的节点ID
from	uint64	本节点ID

MsgBeat消息
成员  	类型	    作用
type	MsgBeat	不用于节点间通信，仅用于leader节点在heartbeat定时器到期时向集群中其他节点发送心跳消息
to	    uint64	消息接收者的节点ID
from	uint64	本节点ID

MsgProp消息
成员   	类型	    作用
type	MsgProp	raft库使用者提议（propose）数据, 也就是想写入数据
to	    uint64	消息接收者的节点ID
from	uint64	本节点ID
entries	Entry	日志条目数组

raft库的使用者向raft库propose数据时，最后会封装成这个类型的消息来进行提交，不同类型的节点处理还不尽相同。

candidate
由于candidate节点没有处理propose数据的责任，所以忽略这类型消息。

follower
首先会检查集群内是否有leader存在，如果当前没有leader存在说明还在选举过程中，这种情况忽略这类消息；否则转发给leader处理。

leader
leader的处理在leader的状态机函数针对MsgProp这种case的处理下，大体如下。

1）检查entries数组是否没有数据，这是一个保护性检查。
2） 检查本节点是否还在集群之中，如果已经不在了则直接返回不进行下一步处理。什么情况下会出现一个leader节点发现自己不存在集群之中了？
    这种情况出现在本节点已经通过配置变化被移除出了集群的场景。
3） 检查raft.leadTransferee字段，当这个字段不为0时说明正在进行leader迁移操作，这种情况下不允许提交数据变更操作，因此此时也是直接返回的。
4） 检查消息的entries数组，看其中是否带有配置变更的数据。如果其中带有数据变更而raft.pendingConf为true
   说明当前有未提交的配置更操作数据，根据raft论文，每次不同同时进行一次以上的配置变更，因此这里会将entries数组中的配置变更数据置为空数据。
5） 到了这里可以进行真正的数据propose操作了，将调用raft算法库的日志模块写入数据，根据返回的情况向其他节点广播消息。


MsgApp消息
成员	    类型	    作用
type	MsgApp	用于leader向集群中其他节点同步数据的消息
to	    uint64	消息接收者的节点ID
from	uint64	本节点ID
entries	Entry	日志条目数组
logTerm	uint64	日志所处的任期ID
index	uint64	索引ID


MsgSnap消息
成员   	  类型	    作用
type	  MsgSnap	用于leader向follower同步数据用的快照消息
to	      uint64	消息接收者的节点ID
from	  uint64	本节点ID
snapshot  Snapshot	快照数据

MsgAppResp消息
成员	        类型     	作用
type	    MsgAppResp	集群中其他节点针对leader的MsgApp/MsgSnap消息的应答消息
to	        uint64	    消息接收者的节点ID
from	    uint64	    本节点ID
index	    uint64	    日志索引ID，用于节点向leader汇报自己已经commit的日志数据ID
reject	    bool	    是否拒绝同步日志的请求
rejectHint	uint64	    拒绝同步日志请求时返回的当前节点日志ID，用于被拒绝方快速定位到下一次合适的同步日志位置


MsgVote/MsgPreVote消息以及MsgVoteResp/MsgPreVoteResp消息
这里把这四种消息放在一起了，因为不论是Vote还是PreVote流程，其请求和应答时传输的数据都是一样的。

先看请求数据
成员	    类型             	作用
type	MsgVote/MsgPreVote	节点投票给自己以进行新一轮的选举
to	    uint64           	消息接收者的节点ID
from	uint64	            本节点ID
term	uint64	            任期ID
index	uint64	            日志索引ID，用于节点向leader汇报自己已经commit的日志数据ID
logTerm	uint64	            日志所处的任期ID
context	bytes	            上下文数据

应答数据
成员	    类型	                        作用
type	MsgVoteResp/MsgPreVoteResp	投票应答消息
to	    uint64	                    消息接收者的节点ID
from	uint64                   	本节点ID
reject	bool	                    是否拒绝

MsgHeartbeat/MsgHeartbeatResp消息
心跳请求消息
成员	    类型	            作用
type	MsgHeartbeat	用于leader向follower发送心跳消息
to	    uint64	        消息接收者的节点ID
from	uint64	        本节点ID
commit	uint64	        提交日志索引
context	bytes	        上下文数据，在这里保存一致性读相关的数据

心跳请求应答消息
成员  	类型	                作用
type	MsgHeartbeatResp	用于follower向leader应答心跳消息
to	    uint64	            消息接收者的节点ID
from	uint64	            本节点ID
context	bytes	            上下文数据，在这里保存一致性读相关的数据

leader中会定时向集群中其他节点发送心跳消息，该消息的作用除了探测节点的存活情况之外，还包括：
commit成员：leader选择min[节点上的Match，leader日志最大提交索引]，用于告知节点哪些日志可以进行提交（commit）。
context：与线性一致性读相关，后面会进行解释。


MsgUnreachable消息
成员   	类型	            作用
type	MsgUnreachable	用于应用层向raft库汇报某个节点当前已不可达
to	    uint64	        消息接收者的节点ID
from	uint64	        不可用的节点ID

仅leader才处理这类消息，leader如果判断该节点此时处于正常接收数据的状态（ProgressStateReplicate），那么就切换到探测状态。

MsgSnapStatus消息
成员	    类型	             作用
type	MsgSnapStatus	 用于应用层向raft库汇报某个节点当前接收快照状态
to	    uint64	         消息接收者的节点ID
from	uint64	         节点ID
reject	bool	         是否拒绝

仅leader处理这类消息：
如果reject为false：表示接收快照成功，将切换该节点状态到探测状态。否则接收失败。

MsgCheckQuorum消息
成员	    类型	              作用
type	MsgCheckQuorum	  用于leader检查集群可用性的消息
to	    uint64	          消息接收者的节点ID
from	uint64	          节点ID
leader的定时器函数，在超过选举时间时，如果当前打开了raft.checkQuorum开关，那么leader将给自己发送一条MsgCheckQuorum消息，
对该消息的处理是：检查集群中所有节点的状态，如果超过半数的节点都不活跃了，那么leader也切换到follower状态。


MsgTransferLeader消息
成员	    类型	                作用
type	MsgTransferLeader	用于迁移leader
to	    uint64	            消息接收者的节点ID
from	uint64	            注意这里不是发送者的ID了，而是准备迁移过去成为新leader的节点ID

这类消息follower将转发给leader处理，因为follower并没有修改集群配置状态的权限。


MsgTimeoutNow消息
成员	    类型          	作用
type	MsgTimeoutNow	leader迁移时，当新旧leader的日志数据同步后，旧leader向新leader发送该消息通知可以进行迁移了
to	    uint64	        新的leader ID
from	uint64	        旧的leader的节点ID
新的leader节点，在还未迁移之前仍然是follower，在收到这条消息后，就可以进行迁移了，
此时会调用前面分析MsgVote时说过的campaign函数，传入的参数是campaignTransfer，表示这是一次由于迁移leader导致的选举流程。

MsgReadIndex和MsgReadIndexResp消息
这两个消息一一对应，使用的成员也一样，在后面分析读一致性的时候再详细解释。

成员	    类型	            作用
type	MsgReadIndex	用于读一致性的消息
to	    uint64	        接收者节点ID
from	uint64	        发送者节点ID
entries	Entry	        日志条目数组
其中，entries数组只会有一条数据，带上的是应用层此次请求的标识数据，在follower收到MsgReadIndex消息进行应答时，
同样需要把这个数据原样带回返回给leader，详细的线性读一致性的实现在后面展开分析。
*/
enum MessageType {
	MsgHup             = 0;   // 不用于节点间通信，仅用于发送给本节点让本节点进行选举
	MsgBeat            = 1;
	MsgProp            = 2;   // 用来发给leader节点，让它在日志中增加数据
	MsgApp             = 3;   // 用来复制日志
	MsgAppResp         = 4;
	MsgVote            = 5;    // 用来请求投票
	MsgVoteResp        = 6;
	MsgSnap            = 7;    // 用来发送snapshot
	MsgHeartbeat       = 8;    // 心跳消息
	MsgHeartbeatResp   = 9;
	MsgUnreachable     = 10;
	MsgSnapStatus      = 11;
	MsgCheckQuorum     = 12;    // 检查法定人数消息
	MsgTransferLeader  = 13;    // 转移leader消息
	MsgTimeoutNow      = 14;    // timeout 消息
	MsgReadIndex       = 15;
	MsgReadIndexResp   = 16;
	MsgPreVote         = 17;    // 用来处理网络分区， 对于投票的改进
	MsgPreVoteResp     = 18;
}

/*
成员	        类型	         作用
type	    MessageType	 消息类型
to	        uint64	     消息接收者的节点ID
from	    uint64	     消息发送者的节点ID
term	    uint64	     任期ID
logTerm	    uint64	     日志所处的任期ID
index	    uint64	     日志索引ID，用于节点向leader汇报自己已经commit的日志数据ID
entries	    Entry	     日志条目数组
commit	    uint64	     提交日志索引
snapshot    Snapshot	 快照数据
reject	    bool	     是否拒绝
rejectHint	uint64	     拒绝同步日志请求时返回的当前节点日志ID，用于被拒绝方快速定位到下一次合适的同步日志位置
context	    bytes	     上下文数据

由于这个Message结构体，全部将raft协议相关的数据都定义在了一起，有些协议不是用到其中的全部数据，所以这里的字段都是optinal的，
*/

// Raft集群中节点之间的通讯都是通过传递不同的Message来完成的，这个Message结构就是一个非常general的大容器，它涵盖了各种消息所需的字段。
message Message {
	// 当前传递的消息类型
	optional MessageType type        = 1  [(gogoproto.nullable) = false];
	// 该消息的接收者
	optional uint64      to          = 2  [(gogoproto.nullable) = false];
	// 该消息的发送者
	optional uint64      from        = 3  [(gogoproto.nullable) = false];
	// 这个消息发出时整个集群所处的任期
	optional uint64      term        = 4  [(gogoproto.nullable) = false];


	// 消息发出者所保存的日志中最后一条的任期号，一般MsgVote会用到这个字段
	optional uint64      logTerm     = 5  [(gogoproto.nullable) = false];
	// 日志索引号。如果当前消息是MsgVote的话，代表这个candidate最后一条日志的索引号，
	// 它跟上面的LogTerm一起代表这个candidate所拥有的最新日志信息，这样别人就可以比较自己的日志是不是比candidate的日志要新，从而决定是否投票
	optional uint64      index       = 6  [(gogoproto.nullable) = false];

	// 需要存储的日志  Raft算法的日志数据条目
	repeated Entry       entries     = 7  [(gogoproto.nullable) = false];

	// 已经提交的日志的索引值，用来向别人同步日志的提交信息
	optional uint64      commit      = 8  [(gogoproto.nullable) = false];
	// 一般跟MsgSnap合用，用来放置具体的Snapshot值
	optional Snapshot    snapshot    = 9  [(gogoproto.nullable) = false];
	// 代表对方节点拒绝了当前节点的请求
	optional bool        reject      = 10 [(gogoproto.nullable) = false];
	// 代表对方节点拒绝了当前节点的请求
	optional uint64      rejectHint  = 11 [(gogoproto.nullable) = false];

	optional bytes       context     = 12;
}

message HardState {
	optional uint64 term   = 1 [(gogoproto.nullable) = false];
	optional uint64 vote   = 2 [(gogoproto.nullable) = false];
	optional uint64 commit = 3 [(gogoproto.nullable) = false];
}

message ConfState {
	repeated uint64 nodes    = 1;
	repeated uint64 learners = 2;
}

enum ConfChangeType {
	ConfChangeAddNode        = 0;
	ConfChangeRemoveNode     = 1;
	ConfChangeUpdateNode     = 2;
	ConfChangeAddLearnerNode = 3;
}

message ConfChange {
	optional uint64          ID      = 1 [(gogoproto.nullable) = false];
	optional ConfChangeType  Type    = 2 [(gogoproto.nullable) = false];
	optional uint64          NodeID  = 3 [(gogoproto.nullable) = false];
	optional bytes           Context = 4;
}
